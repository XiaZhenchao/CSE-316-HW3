{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveSong_Transaction from '../common/MoveSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_DELETE_LIST: \"MARK_DELETE_LIST\",\n  MARK_DELETE_SONG: \"MARK_DELETE_SONG\"\n  // MARK_EDIT_SONG:\"MARK_EDIT_SONG\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markDeleteList: null,\n    markDeleteSong: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: payload,\n            markDeleteSong: store.markDeleteSong\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong\n          });\n        }\n      case GlobalStoreActionType.UPDATE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong\n          });\n        }\n      case GlobalStoreActionType.MARK_DELETE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: payload\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  store.deletelist = function () {\n    let id = store.markDeleteList._id;\n    let name = store.markDeleteList.name;\n    console.log(\"id: \" + id);\n    async function deletelist(id) {\n      let response = await api.deletePlaylistById(id);\n      let name = store.markDeleteList.name;\n      console.log(\"Name: \" + name);\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: name\n      });\n      // store.setCurrentList(newListId);   \n      store.loadIdNamePairs();\n    }\n    deletelist(id);\n  };\n  store.showDeleteListModal = function (id) {\n    let markedList = store.idNamePairs.filter(list => list._id === id)[0];\n    let modal = document.getElementById(\"delete-list-modal\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: markedList\n    });\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.showDeleteSongModal = function (index) {\n    let modal = document.getElementById(\"delete-song-modal\");\n    // console.log(\"test\")\n    // console.log(\"index: \"+ index)\n    // console.log(\"song delete: \"+ this.currentList.songs[index].title)\n    storeReducer({\n      type: GlobalStoreActionType.MARK_DELETE_SONG,\n      payload: index\n    });\n\n    //console.log(\"show delete song modal: \"+ store.markDeleteSong)\n\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    let newlist = {\n      name: \"Untitled\",\n      songs: []\n    };\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(newlist);\n      let playlist = response.data.playlist;\n      let newListId = playlist._id;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: playlist\n      });\n      store.setCurrentList(newListId);\n    }\n    asyncCreateNewList();\n  };\n  store.addNewSong = async function () {\n    let newSong = {\n      artist: \"Unknown\",\n      title: \"Untitled\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    this.currentList.songs.push(newSong);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    // storeReducer({\n    //     type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n    //     payload: this.currentList\n    // });    \n    store.setCurrentList(this.currentList._id);\n  };\n  store.deleteSong = async function () {\n    this.currentList.songs.splice(this.markDeleteSong, 1);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n      payload: this.currentList\n    });\n  };\n\n  // store.moveSong = async function(source, target){\n  //     let temp  = this.currentList.songs[source]\n  //     this.currentList.songs[source] = this.currentList.songs[target]\n  //     this.currentList.songs[target] = temp\n  //     await api.updatePlaylistById(this.currentList._id, this.currentList);\n  //     storeReducer({\n  //         type: GlobalStoreActionType.UPDATE\n  //     });\n  // }\n\n  store.moveSong = async function (start, end) {\n    let list = this.currentList;\n    console.log(\"list: \" + list);\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    start -= 1;\n    end -= 1;\n    console.log(\"stat song: \" + list.songs[start]);\n    console.log(\"end song: \" + list.songs[end]);\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n    store.setCurrentList();\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(this, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"bKbw5Ky0js9fabRfzS9Wcx/czwU=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","MoveSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","UPDATE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_DELETE_LIST","MARK_DELETE_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markDeleteList","markDeleteSong","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","deletelist","id","_id","name","console","log","response","deletePlaylistById","loadIdNamePairs","showDeleteListModal","markedList","filter","list","modal","document","getElementById","classList","add","hideDeleteListModal","remove","showDeleteSongModal","index","hideDeleteSongModal","createNewList","newlist","songs","asyncCreateNewList","createPlaylist","data","newListId","setCurrentList","addNewSong","newSong","artist","title","youTubeId","push","updatePlaylistById","deleteSong","splice","moveSong","start","end","temp","i","changeListName","newName","asyncChangeListName","getPlaylistById","success","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","addMoveSongTransaction","transaction","addTransaction","setIsListNameEditActive"],"sources":["/Users/zhenchaoxia/Desktop/Stony Brook/Fall 2022/CSE 316 Fundamentals of Software Development/HomeWork/playlister_hw3/CSE-316-HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveSong_Transaction from '../common/MoveSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    UPDATE_CURRENT_LIST:\"UPDATE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_DELETE_LIST: \"MARK_DELETE_LIST\",\n    MARK_DELETE_SONG: \"MARK_DELETE_SONG\",\n    // MARK_EDIT_SONG:\"MARK_EDIT_SONG\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markDeleteList: null,\n        markDeleteSong: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: payload,\n                    markDeleteSong: store.markDeleteSong\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong\n                });\n            }\n            case GlobalStoreActionType.UPDATE_CURRENT_LIST:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.listNameActive,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong\n                });\n            }\n            case GlobalStoreActionType.MARK_DELETE_SONG:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: payload,\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n\n    store.deletelist =  function(){\n\n        \n        let id = store.markDeleteList._id\n        let name = store.markDeleteList.name\n        console.log(\"id: \"+ id)\n        async function deletelist(id){\n            let response = await api.deletePlaylistById(id);\n            let name = store.markDeleteList.name\n            console.log(\"Name: \"+name)\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: name\n            });     \n           // store.setCurrentList(newListId);   \n           store.loadIdNamePairs() \n        }\n        deletelist(id);\n    }\n\n    store.showDeleteListModal = function (id){\n        let markedList = store.idNamePairs.filter(list => list._id === id)[0];\n        let modal = document.getElementById(\"delete-list-modal\");\n        \n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: markedList\n        });\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function (){\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSongModal = function(index){\n        let modal = document.getElementById(\"delete-song-modal\");\n        // console.log(\"test\")\n        // console.log(\"index: \"+ index)\n        // console.log(\"song delete: \"+ this.currentList.songs[index].title)\n        storeReducer({\n            type: GlobalStoreActionType.MARK_DELETE_SONG,\n            payload: index\n        });     \n\n        //console.log(\"show delete song modal: \"+ store.markDeleteSong)\n\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteSongModal = function(){\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n\n \n  \n    store.createNewList = function (){\n        let newlist = {\n            name:\"Untitled\",\n            songs:[]\n        }\n        async function asyncCreateNewList(){\n            let response = await api.createPlaylist(newlist);\n            let playlist=response.data.playlist;\n            let newListId=playlist._id;\n           \n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n            });     \n            store.setCurrentList(newListId);                                           \n        }\n        asyncCreateNewList();\n        \n    }\n\n    store.addNewSong = async function(){\n        let newSong = {\n            artist: \"Unknown\", title: \"Untitled\", youTubeId: \"dQw4w9WgXcQ\"\n        }\n        this.currentList.songs.push(newSong)\n            await api.updatePlaylistById(this.currentList._id,this.currentList)\n            // storeReducer({\n            //     type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n            //     payload: this.currentList\n            // });    \n            store.setCurrentList(this.currentList._id) \n    }\n\n    store.deleteSong = async function(){\n        this.currentList.songs.splice(this.markDeleteSong,1);\n        await api.updatePlaylistById(this.currentList._id,this.currentList)\n        storeReducer({\n            type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n            payload: this.currentList\n        });     \n    }\n\n    // store.moveSong = async function(source, target){\n    //     let temp  = this.currentList.songs[source]\n    //     this.currentList.songs[source] = this.currentList.songs[target]\n    //     this.currentList.songs[target] = temp\n    //     await api.updatePlaylistById(this.currentList._id, this.currentList);\n    //     storeReducer({\n    //         type: GlobalStoreActionType.UPDATE\n    //     });\n    // }\n\n    store.moveSong = async function(start, end) {\n        let list = this.currentList;\n        console.log(\"list: \"+ list)\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        start -= 1;\n        end -= 1;\n        console.log(\"stat song: \"+ list.songs[start])\n        console.log(\"end song: \"+ list.songs[end])\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n        store.setCurrentList()\n    }\n\n    \n\n\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n\n    store.addMoveSongTransaction = function (start, end) {\n        let transaction = new MoveSong_Transaction(this, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}