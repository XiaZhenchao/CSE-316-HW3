{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveSong_Transaction from '../common/MoveSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  UPDATE_CURRENT_LIST: \"UPDATE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_DELETE_LIST: \"MARK_DELETE_LIST\",\n  MARK_DELETE_SONG: \"MARK_DELETE_SONG\",\n  MARK_RENAME_SONG: \" MARK_RENAME_SONG\"\n  // MARK_EDIT_SONG:\"MARK_EDIT_SONG\",\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markDeleteList: null,\n    markDeleteSong: null,\n    markRenameSong: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: null,\n            markRenameSong: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: null,\n            markRenameSong: null\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: store.markRenameSong\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: payload,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: store.markRenameSong\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: store.markRenameSong\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: store.markRenameSong\n          });\n        }\n      case GlobalStoreActionType.UPDATE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: store.markRenameSong\n          });\n        }\n      case GlobalStoreActionType.MARK_DELETE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: payload,\n            markRenameSong: store.markRenameSong\n          });\n        }\n      case GlobalStoreActionType.MARK_RENAME_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeleteList: store.markDeleteList,\n            markDeleteSong: store.markDeleteSong,\n            markRenameSong: payload\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  store.deletelist = function () {\n    let id = store.markDeleteList._id;\n    let name = store.markDeleteList.name;\n    console.log(\"id: \" + id);\n    async function deletelist(id) {\n      let response = await api.deletePlaylistById(id);\n      let name = store.markDeleteList.name;\n      console.log(\"Name: \" + name);\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: name\n      });\n      // store.setCurrentList(newListId);   \n      store.loadIdNamePairs();\n    }\n    deletelist(id);\n  };\n  store.showDeleteListModal = function (id) {\n    let markedList = store.idNamePairs.filter(list => list._id === id)[0];\n    let modal = document.getElementById(\"delete-list-modal\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: markedList\n    });\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.showDeleteSongModal = function (index) {\n    let modal = document.getElementById(\"delete-song-modal\");\n    // console.log(\"test\")\n    // console.log(\"index: \"+ index)\n    // console.log(\"song delete: \"+ this.currentList.songs[index].title)\n    storeReducer({\n      type: GlobalStoreActionType.MARK_DELETE_SONG,\n      payload: index\n    });\n\n    //console.log(\"show delete song modal: \"+ store.markDeleteSong)\n\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.showRenameSongModal = function (index) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideRenameSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.createNewList = function () {\n    let newlist = {\n      name: \"Untitled\",\n      songs: []\n    };\n    async function asyncCreateNewList() {\n      let response = await api.createPlaylist(newlist);\n      let playlist = response.data.playlist;\n      let newListId = playlist._id;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: playlist\n      });\n      store.setCurrentList(newListId);\n    }\n    asyncCreateNewList();\n  };\n  store.addNewSong = async function () {\n    let newSong = {\n      artist: \"Unknown\",\n      title: \"Untitled\",\n      youTubeId: \"dQw4w9WgXcQ\"\n    };\n    this.currentList.songs.push(newSong);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    // storeReducer({\n    //     type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n    //     payload: this.currentList\n    // });    \n    store.setCurrentList(this.currentList._id);\n  };\n  store.deleteSong = async function () {\n    this.currentList.songs.splice(this.markDeleteSong, 1);\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n      payload: this.currentList\n    });\n  };\n  store.renameSong = async function () {\n    console.log(\"rename song function\");\n  };\n  store.moveSong = async function (start, end) {\n    let list = this.currentList;\n    start = start.substring(0, 1);\n    end = end.substring(0, 1);\n    // console.log(\"list: \"+ list.songs)\n    // console.log(\"stat song: \"+ list.songs[start].title)\n    // console.log(\"end song: \"+ list.songs[end].title)\n    // WE NEED TO UPDATE THE STATE FOR THE APP\n    // start -= 1;\n    // end -= 1;\n    // console.log(\"start: \"+ start)\n    // console.log(\"end: \"+ end)\n    // if (start < end) {\n    //     let temp = list.songs[start];\n    //     for (let i = start; i < end; i++) {\n    //         list.songs[i] = list.songs[i + 1];\n    //     }\n    //     list.songs[end] = temp;\n    // }\n    // else if (start > end) {\n    //     let temp = list.songs[start];\n    //     for (let i = start; i > end; i--) {\n    //         list.songs[i] = list.songs[i - 1];\n    //     }\n    //     list.songs[end] = temp;\n    // }\n    let temp = list.songs[start];\n    list.songs[start] = list.songs[end];\n    list.songs[end] = temp;\n    await api.updatePlaylistById(this.currentList._id, this.currentList);\n    store.setCurrentList(this.currentList._id);\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(this, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"m7s6o0B4pCp2vCISqmOcHAnxgGs=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","MoveSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","UPDATE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_DELETE_LIST","MARK_DELETE_SONG","MARK_RENAME_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markDeleteList","markDeleteSong","markRenameSong","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","deletelist","id","_id","name","console","log","response","deletePlaylistById","loadIdNamePairs","showDeleteListModal","markedList","filter","list","modal","document","getElementById","classList","add","hideDeleteListModal","remove","showDeleteSongModal","index","hideDeleteSongModal","showRenameSongModal","hideRenameSongModal","createNewList","newlist","songs","asyncCreateNewList","createPlaylist","data","newListId","setCurrentList","addNewSong","newSong","artist","title","youTubeId","push","updatePlaylistById","deleteSong","splice","renameSong","moveSong","start","end","substring","temp","changeListName","newName","asyncChangeListName","getPlaylistById","success","updateList","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","asyncSetCurrentList","history","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","addMoveSongTransaction","transaction","addTransaction","setIsListNameEditActive"],"sources":["/Users/zhenchaoxia/Desktop/Stony Brook/Fall 2022/CSE 316 Fundamentals of Software Development/HomeWork/playlister_hw3/CSE-316-HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveSong_Transaction from '../common/MoveSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    UPDATE_CURRENT_LIST:\"UPDATE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_DELETE_LIST: \"MARK_DELETE_LIST\",\n    MARK_DELETE_SONG: \"MARK_DELETE_SONG\",\n    MARK_RENAME_SONG: \" MARK_RENAME_SONG\",\n    // MARK_EDIT_SONG:\"MARK_EDIT_SONG\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markDeleteList: null,\n        markDeleteSong: null,\n        markRenameSong: null,\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: null,\n                    markRenameSong: null,\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: null,\n                    markRenameSong: null,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: null,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: store.markRenameSong,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: payload,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: store.markRenameSong,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: store.markRenameSong,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: store.markRenameSong,\n                });\n            }\n            case GlobalStoreActionType.UPDATE_CURRENT_LIST:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.listNameActive,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: store.markRenameSong,\n                });\n            }\n            case GlobalStoreActionType.MARK_DELETE_SONG:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: payload,\n                    markRenameSong: store.markRenameSong,\n                });\n            }\n            case GlobalStoreActionType.MARK_RENAME_SONG:{\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeleteList: store.markDeleteList,\n                    markDeleteSong: store.markDeleteSong,\n                    markRenameSong: payload\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    store.deletelist =  function(){\n\n        \n        let id = store.markDeleteList._id\n        let name = store.markDeleteList.name\n        console.log(\"id: \"+ id)\n        async function deletelist(id){\n            let response = await api.deletePlaylistById(id);\n            let name = store.markDeleteList.name\n            console.log(\"Name: \"+name)\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: name\n            });     \n           // store.setCurrentList(newListId);   \n           store.loadIdNamePairs() \n        }\n        deletelist(id);\n    }\n\n    store.showDeleteListModal = function (id){\n        let markedList = store.idNamePairs.filter(list => list._id === id)[0];\n        let modal = document.getElementById(\"delete-list-modal\");\n        \n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: markedList\n        });\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function (){\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSongModal = function(index){\n        let modal = document.getElementById(\"delete-song-modal\");\n        // console.log(\"test\")\n        // console.log(\"index: \"+ index)\n        // console.log(\"song delete: \"+ this.currentList.songs[index].title)\n        storeReducer({\n            type: GlobalStoreActionType.MARK_DELETE_SONG,\n            payload: index\n        });     \n\n        //console.log(\"show delete song modal: \"+ store.markDeleteSong)\n\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteSongModal = function(){\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showRenameSongModal = function(index){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideRenameSongModal = function(){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n \n  \n    store.createNewList = function (){\n        let newlist = {\n            name:\"Untitled\",\n            songs:[]\n        }\n        async function asyncCreateNewList(){\n            let response = await api.createPlaylist(newlist);\n            let playlist=response.data.playlist;\n            let newListId=playlist._id;\n           \n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: playlist\n            });     \n            store.setCurrentList(newListId);                                           \n        }\n        asyncCreateNewList();\n        \n    }\n\n    store.addNewSong = async function(){\n        let newSong = {\n            artist: \"Unknown\", title: \"Untitled\", youTubeId: \"dQw4w9WgXcQ\"\n        }\n        this.currentList.songs.push(newSong)\n            await api.updatePlaylistById(this.currentList._id,this.currentList)\n            // storeReducer({\n            //     type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n            //     payload: this.currentList\n            // });    \n            store.setCurrentList(this.currentList._id) \n    }\n\n    store.deleteSong = async function(){\n        this.currentList.songs.splice(this.markDeleteSong,1);\n        await api.updatePlaylistById(this.currentList._id,this.currentList)\n        storeReducer({\n            type: GlobalStoreActionType.UPDATE_CURRENT_LIST,\n            payload: this.currentList\n        });     \n    }\n\n    store.renameSong = async function(){\n        console.log(\"rename song function\")\n    }\n\n    store.moveSong = async function(start, end) {\n        let list = this.currentList;\n        start = start.substring(0,1)\n        end = end.substring(0,1)\n        // console.log(\"list: \"+ list.songs)\n        // console.log(\"stat song: \"+ list.songs[start].title)\n        // console.log(\"end song: \"+ list.songs[end].title)\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        // start -= 1;\n        // end -= 1;\n        // console.log(\"start: \"+ start)\n        // console.log(\"end: \"+ end)\n        // if (start < end) {\n        //     let temp = list.songs[start];\n        //     for (let i = start; i < end; i++) {\n        //         list.songs[i] = list.songs[i + 1];\n        //     }\n        //     list.songs[end] = temp;\n        // }\n        // else if (start > end) {\n        //     let temp = list.songs[start];\n        //     for (let i = start; i > end; i--) {\n        //         list.songs[i] = list.songs[i - 1];\n        //     }\n        //     list.songs[end] = temp;\n        // }\n        let temp = list.songs[start]\n        list.songs[start] = list.songs[end]\n        list.songs[end] = temp\n\n        await api.updatePlaylistById(this.currentList._id,this.currentList)\n        store.setCurrentList(this.currentList._id) \n    }\n\n    \n\n\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n\n    store.addMoveSongTransaction = function (start, end) {\n        let transaction = new MoveSong_Transaction(this, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}